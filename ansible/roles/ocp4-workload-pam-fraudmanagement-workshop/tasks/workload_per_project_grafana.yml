---
- name: Create operator resource files
  k8s:
    state: present
    namespace: "{{ _namespace }}"
    definition: "{{ lookup('file', role_path ~ '/files/grafana/operator/{{ item }}.yml' ) | from_yaml }}"
  with_items:
  - crd-dashboard
  - crd-datasource
  - crd-grafana
  - role
  - sa

- name: Create operator resource templates
  k8s:
    state: present
    namespace: "{{ _namespace }}"
    definition: "{{ lookup('template', role_path ~ '/templates/grafana/operator/{{ item }}.j2' ) | from_yaml }}"
  with_items:
  - rolebinding
  - deployment

- name: Create Grafana
  k8s:
    state: present
    namespace: "{{ _namespace }}"
    definition: "{{ lookup('file', role_path ~ '/files/grafana/instance.yml' ) | from_yaml }}"

- name: Wait until Grafana is phase 3
  command: >
    oc get grafana/grafana -o jsonpath='{.status.phase}' -n "{{ _namespace }}"
  register: grafana
  retries: "{{ _retry }}"
  delay: "{{ _delay }}"
  until: grafana.stdout == "3"

- name: Check Grafana is running
  command: >
    oc rollout status Deployment/grafana-deployment --watch=true -n "{{ _namespace }}"

- name: Get Grafana route host
  command: >
    oc get route/grafana-route -o jsonpath='{.spec.host}' -n "{{ _namespace }}"
  register: grafana_route
  retries: "{{ _retry }}"
  delay: "{{ _delay }}"
  until: grafana_route.stdout != ""

- name: Wait for Grafana route to respond with 200
  uri:
    url: "https://{{ grafana_route.stdout }}"
    method: GET
    validate_certs: false
    follow_redirects: yes
  register: grafanaresult
  retries: "{{ _retry }}"
  delay: "{{ _delay }}"
  until: grafanaresult.status == 200

- name: todo
  debug:
    msg: "TODO: Create a dashboard for whatever we need to show"